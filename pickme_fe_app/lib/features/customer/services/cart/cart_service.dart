import 'dart:convert';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;
import 'package:pickme_fe_app/features/customer/models/cart/cart.dart';

class CartService {
  final String baseUrl = dotenv.env['API_URL'] ?? '';

  /// üëâ L·∫•y to√†n b·ªô gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng (m·∫∑c ƒë·ªãnh l·∫•y theo user t·ª´ token)
  Future<Cart?> getCart(String token) async {
    final url = Uri.parse('$baseUrl/cart');

    try {
      final response = await http.get(
        url,
        headers: {
          "Accept": "application/json",
          "Authorization": "Bearer $token",
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(utf8.decode(response.bodyBytes));
        return Cart.fromJson(data);
      } else {
        print('L·ªói t·∫£i gi·ªè h√†ng: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi khi t·∫£i gi·ªè h√†ng: $e');
      return null;
    }
  }

  /// üëâ L·∫•y chi ti·∫øt gi·ªè h√†ng theo ID
  Future<Cart?> getCartById(String token, int cartId) async {
    final url = Uri.parse('$baseUrl/cart/$cartId');

    try {
      final response = await http.get(
        url,
        headers: {
          "Accept": "application/json",
          "Authorization": "Bearer $token",
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(utf8.decode(response.bodyBytes));
        return Cart.fromJson(data);
      } else {
        print('L·ªói l·∫•y chi ti·∫øt gi·ªè h√†ng: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi khi l·∫•y chi ti·∫øt gi·ªè h√†ng: $e');
      return null;
    }
  }

  /// üõí Th√™m m√≥n nhanh v√†o gi·ªè (quick-add)
  Future<bool> quickAddToCart({
    required String token,
    required int restaurantId,
    required int menuItemId,
    required int quantity,
  }) async {
    final url = Uri.parse(
      '$baseUrl/cart/quick-add?restaurantId=$restaurantId&menuItemId=$menuItemId&quantity=$quantity',
    );

    try {
      final response = await http.post(
        url,
        headers: {
          "Accept": "application/json",
          "Authorization": "Bearer $token",
        },
      );

      if (response.statusCode == 200) {
        print('‚úÖ Th√™m m√≥n nhanh v√†o gi·ªè h√†ng th√†nh c√¥ng');
        return true;
      } else {
        print('L·ªói th√™m m√≥n nhanh: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi khi th√™m m√≥n nhanh: $e');
      return false;
    }
  }

  /// üßæ Th√™m m√≥n chi ti·∫øt v√†o gi·ªè (c√≥ add-ons, note,...)
  Future<bool> addToCart({
    required String token,
    required int restaurantId,
    required int menuItemId,
    required int quantity,
    String? specialInstructions,
    List<Map<String, dynamic>>? addOns,
  }) async {
    final url = Uri.parse('$baseUrl/cart/add');

    final body = jsonEncode({
      "restaurantId": restaurantId,
      "menuItemId": menuItemId,
      "quantity": quantity,
      "specialInstructions": specialInstructions ?? "",
      "addOns": addOns ?? [],
    });

    try {
      final response = await http.post(
        url,
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json",
          "Authorization": "Bearer $token",
        },
        body: body,
      );

      if (response.statusCode == 200) {
        print('‚úÖ Th√™m m√≥n v√†o gi·ªè h√†ng th√†nh c√¥ng');
        return true;
      } else {
        print('L·ªói th√™m m√≥n chi ti·∫øt: ${response.statusCode}');
        print('Body: ${response.body}');
        return false;
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi khi th√™m m√≥n chi ti·∫øt: $e');
      return false;
    }
  }

  /// üßπ X√≥a to√†n b·ªô gi·ªè h√†ng
  Future<bool> clearCart(String token, int cartId) async {
    final url = Uri.parse('$baseUrl/cart/$cartId/clear');

    try {
      final response = await http.delete(
        url,
        headers: {
          "Accept": "application/json",
          "Authorization": "Bearer $token",
        },
      );

      if (response.statusCode == 200) {
        print('‚úÖ ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng');
        return true;
      } else {
        print('L·ªói khi x√≥a gi·ªè h√†ng: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi khi x√≥a gi·ªè h√†ng: $e');
      return false;
    }
  }

  /// üóëÔ∏è X√≥a m·ªôt item c·ª• th·ªÉ trong gi·ªè
  Future<bool> removeCartItem(String token, int cartId, int itemId) async {
    final url = Uri.parse('$baseUrl/cart/$cartId/items/$itemId');

    try {
      final response = await http.delete(
        url,
        headers: {
          "Accept": "application/json",
          "Authorization": "Bearer $token",
        },
      );

      if (response.statusCode == 200) {
        print('‚úÖ ƒê√£ x√≥a m√≥n kh·ªèi gi·ªè h√†ng');
        return true;
      } else {
        print('L·ªói x√≥a m√≥n kh·ªèi gi·ªè: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi khi x√≥a m√≥n kh·ªèi gi·ªè: $e');
      return false;
    }
  }

  /// üß© L·∫•y danh s√°ch AddOns theo MenuItemId
  Future<List<Map<String, dynamic>>> getAddOnsByMenuItem({
    required String token,
    required int menuItemId,
  }) async {
    final url = Uri.parse('$baseUrl/menu-items/$menuItemId/add-ons');

    try {
      final response = await http.get(
        url,
        headers: {
          "Accept": "application/json",
          "Authorization": "Bearer $token",
        },
      );

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(utf8.decode(response.bodyBytes));
        // Tr·∫£ v·ªÅ danh s√°ch AddOn d∆∞·ªõi d·∫°ng List<Map>
        return data.map((e) => e as Map<String, dynamic>).toList();
      } else {
        print('L·ªói t·∫£i AddOns: ${response.statusCode}');
        return [];
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi khi t·∫£i AddOns: $e');
      return [];
    }
  }

  // Get cart total price for a specific restaurant
  Future<double> getCartTotalPrice({
    required String token,
    required int restaurantId,
  }) async {
    final url = Uri.parse('$baseUrl/cart/total/restaurant/$restaurantId');

    try {
      final response = await http.get(
        url,
        headers: {
          "Accept": "application/json",
          "Authorization": "Bearer $token",
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(utf8.decode(response.bodyBytes));
        return data;
      } else {
        print('L·ªói l·∫•y t·ªïng s·ªë ti·ªÅn trong gi·ªè h√†ng: ${response.statusCode}');
        return 0;
      }
    } catch (e) {
      print('L·ªói l·∫•y t·ªïng s·ªë ti·ªÅn trong gi·ªè h√†ng: $e');
      return 0;
    }
  }

  /// Get number of items in cart for a specific restaurant
  Future<int> getCartItemCount({
    required String token,
    required int restaurantId,
  }) async {
    final url = Uri.parse('$baseUrl/cart/count/restaurant/$restaurantId');

    try {
      final response = await http.get(
        url,
        headers: {
          "Accept": "application/json",
          "Authorization": "Bearer $token",
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(utf8.decode(response.bodyBytes));

        // API return int
        if (data is int) return data;

        return 0;
      } else {
        print('L·ªói l·∫•y s·ªë l∆∞·ª£ng m√≥n trong gi·ªè: ${response.statusCode}');
        return 0;
      }
    } catch (e) {
      print('L·ªói k·∫øt n·ªëi khi l·∫•y s·ªë l∆∞·ª£ng m√≥n trong gi·ªè: $e');
      return 0;
    }
  }

  /// L·∫•y danh s√°ch m√≥n ƒÉn trong gi·ªè h√†ng theo nh√† h√†ng
  // Trong CartService
  Future<Map<String, dynamic>?> getCartByRestaurantId({
    required String token,
    required int restaurantId,
  }) async {
    final url = Uri.parse('$baseUrl/cart/restaurant/$restaurantId');
    try {
      final response = await http.get(
        url,
        headers: {
          "Accept": "application/json",
          "Authorization": "Bearer $token",
        },
      );

      if (response.statusCode == 200) {
        return jsonDecode(utf8.decode(response.bodyBytes));
      }
    } catch (e) {
      print("L·ªói API cart: $e");
    }
    return null;
  }
}
